print(idindex)
filename[idindex] <- paste(directory,"00",id,".csv",collapse = "")
}
else if (id[idindex]<100)
{
print(idindex)
filename[idindex] <- paste(directory,"0",id,".csv",collapse = "")
}
else
{
print(idindex)
filename[idindex] <- paste(directory,id,".csv",collapse = "")
}
}
}
pollutantmean(1,1,10)
pollutantmean <- function(directory, pollutant, id)
{
for (idindex in 1:length(id))
{
filename <- character()
if (id[idindex]<10)
{
print(idindex)
filename[idindex] <- paste(directory,"00",id,".csv",collapse = "")
}
else if (id[idindex]<100)
{
print(idindex)
filename[idindex] <- paste(directory,"0",id,".csv",collapse = "")
}
else
{
print(idindex)
filename[idindex] <- paste(directory,id,".csv",collapse = "")
}
}
}
pollutantmean(1,1,1:10)
pollutantmean <- function(directory, pollutant, id)
{
for (idindex in 1:length(id))
{
filename <- character()
if (id[idindex]<10)
{
print(idindex)
filename[idindex] <- paste(directory,"00",id,".csv",collapse = "")
print(filename[idindex])
}
else if (id[idindex]<100)
{
print(idindex)
filename[idindex] <- paste(directory,"0",id,".csv",collapse = "")
print(filename[idindex])
}
else
{
print(idindex)
filename[idindex] <- paste(directory,id,".csv",collapse = "")
print(filename[idindex])
}
}
}
pollutantmean(1,1,1:10)
pollutantmean <- function(directory, pollutant, id)
{
for (idindex in 1:length(id))
{
filename <- character()
if (id[idindex]<10)
{
print(idindex)
filename[[idindex]] <- paste(directory,"00",id,".csv",collapse = "")
print(filename[[idindex]])
}
else if (id[idindex]<100)
{
print(idindex)
filename[[idindex]] <- paste(directory,"0",id,".csv",collapse = "")
print(filename[idindex])
}
else
{
print(idindex)
filename[[idindex]] <- paste(directory,id,".csv",collapse = "")
print(filename[[idindex]])
}
}
}
pollutantmean(1,1,1:10)
abc<-"C:\Users\137449\Google Drive\RP\R Programming W2\Programming Assignment\specdata"
getwd()
abc<-"C:/Users/137449/Google Drive/RP/R Programming W2/Programming Assignment/specdata"
abc
pollutantmean(abc,1,id="001")
pollutantmean <- function(directory, pollutant, id)
{
filename<-paste(directory,"/",id,".csv",sep="",collapse="")
y<-read.csv(filename)
}
pollutantmean(abc,1,id="001")
filename
pollutantmean <- function(directory, pollutant, id)
{
filename<-paste(directory,"/",id,".csv",sep="",collapse="")
y<-read.csv(filename)
}
filename
pollutantmean(abc,1,"001")
pollutantmean <- function(directory, pollutant, id)
{
filename<-paste(directory,"/",id,".csv",sep="",collapse="")
print(filename)
y<-read.csv(filename)
}
pollutantmean(abc,1,id="001")
y
abcd<-read.csv(filename)
filename
pollutantmean <- function(directory, pollutant, id)
{
filename<-paste(directory,"/",id,".csv",sep="",collapse="")
print(filename)
y<-read.csv(filename)
}
pollutantmean(abc,1,"002")
pollutantmean <- function(directory, pollutant, id)
{
filename<-paste(directory,"/",id,".csv",sep="",collapse="")
print(filename)
y<-read.csv(filename)
print(y)
}
pollutantmean(abc,1,"001")
getwd()
getwd()
setwd("C:/Users/137449/Google Drive/RP/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
source("cachematrix.R")
cacheSolve(matrix(c(1:20),4,5))
y<-matrix(rnorm(20),4,5)
makeCacheMatrix(y)
ylist<-makeCacheMatrix(y)
ylist
ylsit$set
ylist$set()
ylist$set
ylist
print(ylist)
cacheSolve(y)
cachesolve(y)
cacheSolve(y)
is.recursive(y)
testlist<-makeCacheMatrix(y)
cacheSolve(testlist)
y
y<-matrix(rnorm(16),4,4)
y
ylist <- makeCacheMatrix(y)
ylist
cacheSolve(ylist)
cacheSolve(ylist)
y
## Put comments here that give an overall description of what your
## functions do
## This function receives a matrix input.
makeCacheMatrix <- function( x = matrix() )
{
invmat <- NULL
set <- function(y)
{
x <<- y
invmat <<- NULL
}
get <- function()
{
x
}
setinv <- function(inv)
{
invmat <<- inv
}
getinv <- function()
{
invmat
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
invmat <- x$getinv()
if(!is.null(invmat))
{
message("Retreiving cached inverse of matrix")
return(invmat)
}
data <- x$get()
print (data())
invmat <- solve(data, ...)
x$setinv(invmat)
invmat
}
y<-matrix(c(1:9),3,3)
y
cacheSolve(y)
y<-makeCacheMatrix(y)
cacheSolve(y)
class(y)
is.recursive(y)
cacheSolve(y)
rm(testlist,y,ylist)
rm(all)
## Put comments here that give an overall description of what your
## functions do
## This function receives a matrix input.
makeCacheMatrix <- function( x = matrix() )
{
invmat <- NULL
set <- function(y)
{
x <<- y
invmat <<- NULL
}
get <- function()
{
x
}
setinv <- function(inv)
{
invmat <<- inv
}
getinv <- function()
{
invmat
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
invmat <- x$getinv()
if(!is.null(invmat))
{
message("Retreiving cached inverse of matrix")
return(invmat)
}
data <- x$get()
print (data)
invmat <- solve(data, ...)
x$setinv(invmat)
invmat
}
testlist<-makeCacheMatrix(matrix(rnorm(16),4,4))
testlist$get()
testlist$getinv()
cacheSolve(testlist)
?solve
## Two different functions
## makeCacheMatrix receives matrix as an input, returns a list of 4 functions
## cacheSolve receives a list generated by makeCacheMatrix. If global inverse is already calculated it simply fetches the value. If not it calculates the inverse, sets the global variable.
## This fn gets a matrix and returns a list of functions
makeCacheMatrix <- function( x = matrix() )
{
invmat <- NULL
set <- function(y)
{
x <<- y
invmat <<- NULL
}
get <- function()
{
x
}
setinv <- function(inv)
{
invmat <<- inv
}
getinv <- function()
{
invmat
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
invmat <- x$getinv()
if(!is.null(invmat))
{
message("Retreiving cached inverse of matrix")
return(invmat)
}
data <- x$get()
print (data)
invmat <- solve(data, ...)
x$setinv(invmat)
invmat
}
makeCacheMatrix(c(1,2),c(3,4))
makeCacheMatrix(matrix(c(1,2),c(3,4)))
newmat <- matrix(c(1,2),c(3,4),2,2)
newmat
newmat <- matrix(c(1,2),c(3,4))
newmat
newmat <- matrix(c(1,2),c(3,4),2,2)
newmat
makeCacheMatrix(newmat)
newlist<-makeCacheMatrix(newmat)
cacheSolve(newlist)
newmat<-matrix(c(1:4),2,2)
newmat
newlist<-makeCacheMatrix(newmat)
cacheSolve(newlist)
cacheSolve(newlist)
## Two different functions
## makeCacheMatrix receives matrix as an input, returns a list of 4 functions
## cacheSolve receives a list generated by makeCacheMatrix. If global inverse is already calculated it simply fetches the value. If not it calculates the inverse, sets the global variable.
## This fn gets a matrix and returns a list of functions
makeCacheMatrix <- function( x = matrix() )
{
invmat <- NULL
set <- function(y)
{
x <<- y
invmat <<- NULL
}
get <- function()
{
x
}
setinv <- function(inv)
{
print("Setting the inverse through makeChacheMatrix function")
invmat <<- inv
}
getinv <- function()
{
invmat
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
invmat <- x$getinv()
if(!is.null(invmat))
{
message("Retreiving cached inverse of matrix")
return(invmat)
}
data <- x$get()
print (data)
invmat <- solve(data, ...)
x$setinv(invmat)
invmat
}
newlist<-makeCacheMatrix(newmat)
cacheSolve(newlist)
cacheSolve(newlist)
## Two different functions
## makeCacheMatrix receives matrix as an input, returns a list of 4 functions
## cacheSolve receives a list generated by makeCacheMatrix. If global inverse is already calculated it simply fetches the value. If not it calculates the inverse, sets the global variable.
## This fn gets a matrix and returns a list of functions
makeCacheMatrix <- function( x = matrix() )
{
invmat <- NULL
set <- function(y)
{
x <<- y
invmat <<- NULL
}
get <- function()
{
x
}
setinv <- function(inv)
{
print("Setting the inverse through makeChacheMatrix function")
invmat <<- inv
}
getinv <- function()
{
invmat
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
invmat <- x$getinv()
if(!is.null(invmat))
{
message("Retreiving cached inverse of matrix")
return(invmat)
}
data <- x$get()
print ("Displaying original data as is", data)
invmat <- solve(data, ...)
x$setinv(invmat)
invmat
}
newlist<-makeCacheMatrix(newmat)
cacheSolve(newlist)
## Two different functions
## makeCacheMatrix receives matrix as an input, returns a list of 4 functions
## cacheSolve receives a list generated by makeCacheMatrix. If global inverse is already calculated it simply fetches the value. If not it calculates the inverse, sets the global variable.
## This fn gets a matrix and returns a list of functions
makeCacheMatrix <- function( x = matrix() )
{
invmat <- NULL
set <- function(y)
{
x <<- y
invmat <<- NULL
}
get <- function()
{
x
}
setinv <- function(inv)
{
print("Setting the inverse through makeChacheMatrix function")
invmat <<- inv
}
getinv <- function()
{
invmat
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
invmat <- x$getinv()
if(!is.null(invmat))
{
message("Retreiving cached inverse of matrix")
return(invmat)
}
data <- x$get()
print ("Displaying original data as is")
print (data)
invmat <- solve(data, ...)
x$setinv(invmat)
invmat
}
newlist<-makeCacheMatrix(newmat)
cacheSolve(newlist)
cacheSolve(newlist)
## Two different functions
## makeCacheMatrix receives matrix as an input, returns a list of 4 functions
## cacheSolve receives a list generated by makeCacheMatrix. If global inverse is already calculated it simply fetches the value. If not it calculates the inverse, sets the global variable.
## This fn gets a matrix and returns a list of functions
makeCacheMatrix <- function( x = matrix() )
{
invmat <- NULL
set <- function(y)
{
x <<- y
invmat <<- NULL
}
get <- function()
{
x
}
setinv <- function(inv)
{
message ("Setting the inverse through makeChacheMatrix function")
invmat <<- inv
}
getinv <- function()
{
invmat
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
invmat <- x$getinv()
if(!is.null(invmat))
{
message("Retreiving cached inverse of matrix")
return(invmat)
}
data <- x$get()
message ("Displaying original matrix")
print (data)
invmat <- solve(data, ...)
x$setinv(invmat)
invmat
}
newlist<-makeCacheMatrix(newmat)
cacheSolve(newlist)
cacheSolve(newlist)
cacheSolve(newlist)
cacheSolve(newlist)
cacheSolve(newlist)
cacheSolve(newlist)
newlist$set(matrix(rnorm(16),4,4))
cacheSolve(newlist)
cacheSolve(newlist)
